/*
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */

public class HighlyDivisibleTriangularNumbers {

	public static void main(String[] args) {
		System.out.println(findFirstTriNumberOverDivisorCount(500));	// 76576500
	}
	
	private static long findFirstTriNumberOverDivisorCount(long divisorCount) {
		// loop over triangle numbers
		long triangleNumber = 1;
		long triangleDivisorCount = 1;
		long counter = 2;
		while (triangleDivisorCount <= divisorCount) {
			triangleNumber += counter;
			triangleDivisorCount = getDivisorCount(triangleNumber);
			counter++;
		}
		return triangleNumber;
	}
	
	private static long getDivisorCount(long n) {
		long divisorCount = 0;
		for (int i = 1; i < Math.sqrt(n); i++) {
			if (n % i == 0) {
				// if i is the square root of n, increment divisorCount only once
				if (n / i == i) {
					divisorCount++;
				}
				// otherwise, increment for both factors
				else {
					divisorCount += 2;
				}
			}
		}
		return divisorCount;
	}

}
